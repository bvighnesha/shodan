package exploitsapi

import (
	"context"
	. "net/http"
	"strconv"
	"vighnesha.in/shodan/config"
	"vighnesha.in/shodan/net/http"
	"vighnesha.in/shodan/net/httputil"
)

type Exploits interface {
	Search(ctx context.Context, query string, facets string, page int) (string, error)
	Count(ctx context.Context, query string, facets string) (string, error)
}

type exploits struct {
	key    string
	config config.Exploitsapi
}

func (exploits *exploits) Search(ctx context.Context, query string, facets string, page int) (string, error) {
	url := exploits.config.SearchURL

	options := make(map[string]string)
	options[config.KEY] = exploits.key
	options["query"] = query
	options["facets"] = facets
	options["page"] = strconv.Itoa(page)

	response, e := http.Do(ctx, MethodGet, url, options)
	return httputil.Response(response, e)
}

func (exploits *exploits) Count(ctx context.Context, query string, facets string) (string, error) {
	url := exploits.config.CountURL

	options := make(map[string]string)
	options[config.KEY] = exploits.key
	options["query"] = query
	options["facets"] = facets

	response, e := http.Do(ctx, MethodGet, url, options)
	return httputil.Response(response, e)
}

func Configure(apiKey string, configuration config.Exploitsapi) Exploits {
	return &exploits{key: apiKey, config: configuration}
}
